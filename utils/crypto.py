# utils/crypto.py - Syst√®me de Chiffrement des Configurations Agences
"""
Ce module g√®re le chiffrement/d√©chiffrement des donn√©es sensibles des agences.
IMPORTANT: La cl√© ma√Ætre (MASTER_ENCRYPTION_KEY) doit TOUJOURS rester la m√™me,
sinon toutes les donn√©es chiffr√©es seront perdues.
"""

from cryptography.fernet import Fernet
import base64
import hashlib
import json
from typing import Optional, Dict, Any


class CryptoManager:
    """
    Gestionnaire de chiffrement pour les donn√©es sensibles des agences.
    Utilise Fernet (chiffrement sym√©trique) de la librairie cryptography.
    """
    
    def __init__(self, master_key: str):
        """
        Initialise le gestionnaire avec une cl√© ma√Ætre.
        
        Args:
            master_key: Cl√© ma√Ætre (doit √™tre constante en production)
        """
        # Convertir la cl√© ma√Ætre en cl√© Fernet valide (32 bytes URL-safe base64)
        self.fernet = self._create_fernet_from_key(master_key)
    
    def _create_fernet_from_key(self, master_key: str) -> Fernet:
        """
        Convertit une cl√© ma√Ætre string en objet Fernet.
        
        La cl√© doit √™tre de 32 bytes en base64 URL-safe.
        On utilise SHA256 pour d√©river une cl√© de la bonne taille.
        """
        # D√©river une cl√© de 32 bytes depuis la cl√© ma√Ætre
        key_bytes = hashlib.sha256(master_key.encode()).digest()
        # Encoder en base64 URL-safe (format requis par Fernet)
        fernet_key = base64.urlsafe_b64encode(key_bytes)
        return Fernet(fernet_key)
    
    def encrypt(self, data: str) -> str:
        """
        Chiffre une cha√Æne de caract√®res.
        
        Args:
            data: Donn√©es √† chiffrer (string)
            
        Returns:
            Donn√©es chiffr√©es (string base64)
        """
        if not data:
            return ''
        
        try:
            encrypted_bytes = self.fernet.encrypt(data.encode('utf-8'))
            return encrypted_bytes.decode('utf-8')
        except Exception as e:
            print(f"‚ùå Erreur de chiffrement: {e}")
            raise
    
    def decrypt(self, encrypted_data: str) -> str:
        """
        D√©chiffre une cha√Æne de caract√®res.
        
        Args:
            encrypted_data: Donn√©es chiffr√©es (string base64)
            
        Returns:
            Donn√©es d√©chiffr√©es (string)
        """
        if not encrypted_data:
            return ''
        
        try:
            decrypted_bytes = self.fernet.decrypt(encrypted_data.encode('utf-8'))
            return decrypted_bytes.decode('utf-8')
        except Exception as e:
            print(f"‚ùå Erreur de d√©chiffrement: {e}")
            # Si le d√©chiffrement √©choue, c'est probablement que la cl√© a chang√©
            raise ValueError("Impossible de d√©chiffrer les donn√©es. La cl√© ma√Ætre a peut-√™tre chang√©.")
    
    def encrypt_json(self, data: Dict[Any, Any]) -> str:
        """
        Chiffre un dictionnaire Python (converti en JSON).
        
        Args:
            data: Dictionnaire √† chiffrer
            
        Returns:
            JSON chiffr√© (string)
        """
        json_str = json.dumps(data)
        return self.encrypt(json_str)
    
    def decrypt_json(self, encrypted_json: str) -> Dict[Any, Any]:
        """
        D√©chiffre un JSON chiffr√© et le retourne en dictionnaire.
        
        Args:
            encrypted_json: JSON chiffr√© (string)
            
        Returns:
            Dictionnaire Python
        """
        json_str = self.decrypt(encrypted_json)
        return json.loads(json_str) if json_str else {}


# ==============================================================================
# FONCTIONS UTILITAIRES GLOBALES
# ==============================================================================

_crypto_manager_instance: Optional[CryptoManager] = None


def init_crypto(master_key: str):
    """
    Initialise le gestionnaire de chiffrement global.
    √Ä appeler au d√©marrage de l'application.
    
    Args:
        master_key: Cl√© ma√Ætre de chiffrement
    """
    global _crypto_manager_instance
    _crypto_manager_instance = CryptoManager(master_key)
    print("üîê Gestionnaire de chiffrement initialis√©")


def get_crypto() -> CryptoManager:
    """
    Retourne l'instance du gestionnaire de chiffrement.
    
    Returns:
        CryptoManager instance
        
    Raises:
        RuntimeError: Si le gestionnaire n'a pas √©t√© initialis√©
    """
    if _crypto_manager_instance is None:
        raise RuntimeError("‚ùå Le gestionnaire de chiffrement n'a pas √©t√© initialis√©. Appelez init_crypto() d'abord.")
    return _crypto_manager_instance


def encrypt_api_key(api_key: str) -> str:
    """
    Raccourci pour chiffrer une cl√© API.
    
    Args:
        api_key: Cl√© API en clair
        
    Returns:
        Cl√© API chiffr√©e
    """
    return get_crypto().encrypt(api_key)


def decrypt_api_key(encrypted_api_key: str) -> str:
    """
    Raccourci pour d√©chiffrer une cl√© API.
    
    Args:
        encrypted_api_key: Cl√© API chiffr√©e
        
    Returns:
        Cl√© API en clair
    """
    return get_crypto().decrypt(encrypted_api_key)


def encrypt_config(config_dict: Dict[str, Any]) -> str:
    """
    Raccourci pour chiffrer un dictionnaire de configuration.
    
    Args:
        config_dict: Configuration (dict)
        
    Returns:
        Configuration chiffr√©e (string)
    """
    return get_crypto().encrypt_json(config_dict)


def decrypt_config(encrypted_config: str) -> Dict[str, Any]:
    """
    Raccourci pour d√©chiffrer un dictionnaire de configuration.
    
    Args:
        encrypted_config: Configuration chiffr√©e (string)
        
    Returns:
        Configuration (dict)
    """
    return get_crypto().decrypt_json(encrypted_config)


# ==============================================================================
# G√âN√âRATION DE CL√â MA√éTRE
# ==============================================================================

def generate_master_key() -> str:
    """
    G√©n√®re une nouvelle cl√© ma√Ætre s√©curis√©e.
    
    ‚ö†Ô∏è ATTENTION: √Ä n'utiliser QU'UNE SEULE FOIS lors de la premi√®re installation.
    Si vous changez la cl√© apr√®s avoir chiffr√© des donn√©es, elles seront perdues.
    
    Returns:
        Cl√© ma√Ætre g√©n√©r√©e (√† sauvegarder dans .env)
    """
    key = Fernet.generate_key()
    return key.decode('utf-8')


# ==============================================================================
# EXEMPLE D'UTILISATION
# ==============================================================================

if __name__ == "__main__":
    """
    Exemple de test du syst√®me de chiffrement.
    Lancez ce fichier directement pour tester : python utils/crypto.py
    """
    
    print("\nüîê TEST DU SYST√àME DE CHIFFREMENT\n")
    
    # 1) G√©n√©rer une cl√© ma√Ætre
    master_key = generate_master_key()
    print(f"Cl√© ma√Ætre g√©n√©r√©e: {master_key}\n")
    
    # 2) Initialiser le crypto manager
    init_crypto(master_key)
    
    # 3) Tester le chiffrement d'une cl√© API
    api_key = "sk_test_1234567890abcdef"
    encrypted = encrypt_api_key(api_key)
    decrypted = decrypt_api_key(encrypted)
    
    print(f"Cl√© API originale : {api_key}")
    print(f"Cl√© API chiffr√©e  : {encrypted}")
    print(f"Cl√© API d√©chiffr√©e: {decrypted}")
    print(f"‚úÖ Test r√©ussi: {api_key == decrypted}\n")
    
    # 4) Tester le chiffrement d'une config JSON
    config = {
        "mail_server": "smtp.example.com",
        "mail_port": 587,
        "mail_username": "noreply@example.com",
        "mail_password": "super_secret_password"
    }
    
    encrypted_config = encrypt_config(config)
    decrypted_config = decrypt_config(encrypted_config)
    
    print(f"Config originale : {config}")
    print(f"Config chiffr√©e  : {encrypted_config[:50]}...")
    print(f"Config d√©chiffr√©e: {decrypted_config}")
    print(f"‚úÖ Test r√©ussi: {config == decrypted_config}")